// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3668.Stronghold;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3668.Stronghold.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    public Joystick joyDrive;
    public JoystickButton InvertFront;
    public JoystickButton rollerForward;
    public JoystickButton rollerBackward;
    public JoystickButton turtleTailUP;
    public JoystickButton turtleTailDOWN;
    public Joystick joyArticulator;
    public JoystickButton joyTurbo;
    public JoystickButton turtleCal;
    public JoystickButton turtleTrigger;
    public JoystickButton AccelReadOut;


    public OI() {

        joyArticulator = new Joystick(1);
        joyDrive = new Joystick(0);
        
        AccelReadOut = new JoystickButton(joyDrive, 9);
        AccelReadOut.whenPressed(new CMDAccelTest());
        turtleTrigger = new JoystickButton(joyArticulator, Settings.Button_turtleTrigger);
        turtleTrigger.whileHeld(new CMDjoyTurtleTail());
        turtleCal = new JoystickButton(joyArticulator, 7);
        turtleCal.whenPressed(new CMDCalibrateTurtleTail());
        rollerBackward = new JoystickButton(joyArticulator, Settings.Button_rollerBackward);
        rollerBackward.whileHeld(new CMDrollerForward());
        rollerForward = new JoystickButton(joyArticulator, Settings.Button_rollerForward);
        rollerForward.whileHeld(new CMDrollerBackward());
        turtleTailUP = new JoystickButton(joyArticulator, Settings.Button_turtleTailUP);
        //turtleTailUP.whenPressed(new CMDturtleTailUP());
        turtleTailDOWN = new JoystickButton(joyArticulator, Settings.Button_turtleTailDOWN);
       // turtleTailDOWN.whenPressed(new CMDturtleTailDOWN());
        joyTurbo = new JoystickButton(joyDrive, Settings.Button_joyTurbo);
        joyTurbo.whileHeld(new CMDjoystickShift());
        InvertFront = new JoystickButton(joyDrive, Settings.Button_joyInvertFront);
        InvertFront.whenPressed(new CMDinvertDrive());
        


        // SmartDashboard Buttons
        //SmartDashboard.putData("Drive Forward To Outerworks!", new CMDdriveForward(Settings.Auto_InchesFromOuterworks));
       // SmartDashboard.putData("Drive Forward To Tower", new CMDdriveForward(Settings.Auto_InchesToTower));
          SmartDashboard.putData("Calibrate Turtle tail!", new CMDCalibrateTurtleTail());
          SmartDashboard.putBoolean("Turtle Tail State: ", Robot.TurtleTail.isUP());
    }

    public Joystick getJoyDrive() {
        return joyDrive;
    }

    public Joystick getJoyArticulator() {
        return joyArticulator;
    }

}

