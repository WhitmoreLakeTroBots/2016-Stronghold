// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3668.Stronghold;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3668.Stronghold.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	
    public Joystick joyDrive;
    public JoystickButton InvertFront;
    public JoystickButton rollerForward;
    public JoystickButton rollerBackward;
    public JoystickButton turtleTailUP;
    public JoystickButton turtleTailDOWN;
    public Joystick joyArticulator;
    public JoystickButton joySafetyDir;
    public JoystickButton joyTurbo;
    public JoystickButton turtleCal;
    public JoystickButton turtleTrigger;
    public JoystickButton AccelReadOut;
    public JoystickButton joySafetyArt;
    public JoystickButton joyScale;
    public JoystickButton joyRelease;
    public JoystickButton joyResetScaler;
    public JoystickButton joyCreepyGear;
    
    public OI() {

        joyArticulator = new Joystick(1);
        joyDrive = new Joystick(0);
        
        AccelReadOut = new JoystickButton(joyDrive, 9);
        AccelReadOut.whenPressed(new CMDAccelTest());
        turtleTrigger = new JoystickButton(joyArticulator, Settings.Button_turtleTrigger);
        turtleTrigger.whileHeld(new CMDjoyTurtleTail());
        turtleCal = new JoystickButton(joyArticulator, 7);
        turtleCal.whenPressed(new CMDCalibrateTurtleTail());
        rollerBackward = new JoystickButton(joyArticulator, Settings.Button_rollerBackward);
        rollerBackward.whileHeld(new CMDrollerForward(Settings.BR_ejectMilliseconds));
        rollerForward = new JoystickButton(joyArticulator, Settings.Button_rollerForward);
        rollerForward.whileHeld(new CMDrollerBackward());
        turtleTailUP = new JoystickButton(joyArticulator, Settings.Button_turtleTailUP);
        //turtleTailUP.whenPressed(new CMDturtleTailUP());
        turtleTailDOWN = new JoystickButton(joyArticulator, Settings.Button_turtleTailDOWN);
       // turtleTailDOWN.whenPressed(new CMDturtleTailDOWN());
        joyTurbo = new JoystickButton(joyDrive, Settings.Button_joyTurbo);
        joyTurbo.whileHeld(new CMDjoystickShift());
        InvertFront = new JoystickButton(joyDrive, Settings.Button_joyInvertFront);
        InvertFront.whenPressed(new CMDinvertDrive());
        
        joyCreepyGear = new JoystickButton(joyDrive, Settings.Button_joyCreepyGear);
        
        joySafetyDir = new JoystickButton(joyDrive, Settings.Button_joySafety);
        joySafetyArt = new JoystickButton(joyArticulator, Settings.Button_joySafety);
        
        joyScale = new JoystickButton(joyArticulator, Settings.Button_joySCALE);
        joyScale.whileHeld(new CMDscale());

        joyRelease = new JoystickButton(joyArticulator, Settings.Button_joyReleaseScaler);
        joyRelease.whenPressed(new CMDrealeaseScalerMotor(Settings.SL_TimeRelaese));
        
        joyResetScaler = new JoystickButton (joyArticulator, Settings.Button_tuneScaler);
        joyResetScaler.whileHeld(new CMDresetScaler());
       // joyRelease.whenReleased(new CMDrealeaseScalerMotor(Settings.SL_TimeRelaese));
        // SmartDashboard Buttons
        //SmartDashboard.putData("Drive Forward To Outerworks!", new CMDdriveForward(Settings.Auto_InchesFromOuterworks));
       // SmartDashboard.putData("Drive Forward To Tower", new CMDdriveForward(Settings.Auto_InchesToTower));
//          SmartDashboard.putData("Calibrate Turtle tail!", new CMDCalibrateTurtleTail());
//          SmartDashboard.putBoolean("Turtle Tail State: ", Robot.TurtleTail.isUP());
    }

    public Joystick getJoyDrive() {
        return joyDrive;
    }

    public Joystick getJoyArticulator() {
        return joyArticulator;
    }

}

