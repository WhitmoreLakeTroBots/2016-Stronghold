// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3668.Stronghold;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc3668.Stronghold.commands.*;
import org.usfirst.frc3668.Stronghold.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	Command chassisTeleopCommand;
	Command turtleTailTeleop;
	public static OI oi;
	public static Chassis chassis;
	public static BoulderRoller boulderRoller;
	public static TurtleTail TurtleTail;
	public static boolean isDriveReversed;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		chassis = new Chassis();
		Robot.chassis.initGyro();
		boulderRoller = new BoulderRoller();
		TurtleTail = new TurtleTail();
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();
		// instantiate the command used for the autonomous period
		autonomousCommand = new CMDautoGroup();
		chassisTeleopCommand = new CMDjoystickDrive();
		

	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {
		if (chassisTeleopCommand != null)
			chassisTeleopCommand.cancel();
		if (autonomousCommand != null)
			autonomousCommand.cancel();
		if (turtleTailTeleop != null)
			turtleTailTeleop.cancel();
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		Robot.chassis.Shift(false);
		Robot.TurtleTail.encoderReset();
		if (chassisTeleopCommand != null)
			chassisTeleopCommand.cancel();
		if (turtleTailTeleop != null)
			turtleTailTeleop.cancel();
		Robot.chassis.resetGyro();
		if (autonomousCommand != null)
			autonomousCommand.start();

	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
		Robot.chassis.Shift(false);
		if (chassisTeleopCommand != null)
			chassisTeleopCommand.start();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
	}

	public void testInit() {
		if (autonomousCommand != null)
			autonomousCommand.cancel();
		if (chassisTeleopCommand != null)
			chassisTeleopCommand.cancel();
		if (turtleTailTeleop != null)
			turtleTailTeleop.cancel();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
